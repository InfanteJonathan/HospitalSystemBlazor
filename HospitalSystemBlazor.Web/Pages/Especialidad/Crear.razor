@page "/crear"
@inject EspecialidadService _service
@inject NavigationManager _navigate


<PageTitle>Nueva</PageTitle>
<h3>Crear</h3>
<br />
<EditForm Model="Especialidad"  OnValidSubmit="@Registrar">
    <DataAnnotationsValidator/>
    <div class="form-control" style="width:400px">
        <div>
            <label>Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="Especialidad.Nombre" />
            <ValidationMessage For="@(() => Especialidad.Nombre)" />
        </div>
        <div>
            <label>Descripcion</label>
            <InputText id="nombre" class="form-control" @bind-Value="Especialidad.Descripcion" />
            <ValidationMessage For="@(() => Especialidad.Descripcion)" />
        </div>
        <div>
            <label>Precio</label>
            <InputNumber id="nombre" class="form-control" @bind-Value="Especialidad.Precio" />
            <ValidationMessage For="@(() => Especialidad.Precio)" />
        </div>
        <div>
            <label>Activo: <InputCheckbox class="form-control" @bind-Value="Especialidad.Activo" /></label>
        </div>
        <button type="submit" class="btn btn-success">Registrar</button>
        <button @onclick='() => _navigate.NavigateTo("/listaEspec")' class="btn btn-secondary">Atras</button>
    </div>
</EditForm>



@code {
    EspecialidadDTO Especialidad = new();
    string mensaje = string.Empty;
    bool exito = false;


    async Task Registrar()
    {
        var response = await _service.Crear(Especialidad);
        try
        {


            if (response.Exito)
            {
                mensaje = response.Mensaje;
                exito = response.Exito;
                _navigate.NavigateTo("/listaEspec");
            }
        }
        catch (Exception ex)
        {
            mensaje = response.Mensaje;
            exito = response.Exito;
        }

    }
}
